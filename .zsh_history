/Volumes/BetterTouchTool\ 3.553/Open\ Gatekeeper\ friendly ; exit;
brew
brew upgrade
brew install
sudo xcode-select --install
npm install -g @bitwarden/cli
brew install npm
bew
brew update
cd
ls
brew
brew install wget
brew install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/users/thomashu/Downloads -c install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
sudo /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install git
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
ping 
pint https://omakase.in/en/r/gv412216/reservations/new
ping https://omakase.in/en/r/gv412216/reservations/new
cd /Documents
ls
cd Documents
jupyter notebook
mkdir llm
brew install 
pip install jupyterlab
python3 -m ensurepip--upgrade
python -m ensurepip --upgrade
python3 -m pip --version
python -m pip install --upgrade pip
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade pip
export PATH="/Users/thomashu/Library/Python/3.9/bin"
pip install jupyterlab
pip3 install jupyterlab
jupyter-lab
jupyter-lab
pip3 jupyter-lab
pip3 install jupyterlab
pip3 install jupyterlab
pip3 install --upgrade pip
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
pip3 install jupyterlab
rustc --version
pip3 install jupyter
jupyter-lab
pip3 install --upgrade pip
jupyter-lab
jupyter notebook
pip install jupyterlab
jupyter-lab
xcode-select --install
xcode-select --install
Software Update
xcode-select Software Update
conda install anaconda
conda install
pip3 install numpy
pip3 install matplotlib
install vim
pip3 install graphviz
sudo apt-get install graphviz
brew install graphviz
export PATH=/opt/homebrew/bin:$PATH
brew install graphviz
cd
cd
ls
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install graphviz
pip3 install graphviz
sudo apt-get install graphViz
/usr/local/bin/dot -V
/thomashu/local/bin/dot -V
ls
/usr/local/bin
export PATH="${PATH}:usr/local/bin"
/usr/local/bin/dot -V
brew cleanup
brew doctor && brew cleanup && source ~/.zshrc
which dot
cd /opt/homebrew/bin/dot
cp -R /opt/homebrew/bin/dot /usr/local/bin
which dot
sudo vi /etc/paths
dot -V
cp -R /opt/homebrew/bin/dot /usr/local/bin
cd /opt/homebrew/bin/dot
which dot
dot -V
echo $PATH | tr : \ \ | fmt -w1 | grep local
/usr/local/bin/dot -V
export PATH=/opt/homebrew/bin:$PATH
source ~/.zshrc
echo $PATH
echo $PATH | tr : \ \ | fmt -w1 | grep local
vi ~/.zshrc
echo $PATH | tr : \ \ | fmt -w1 | grep local
echo $PAT
echo $PATH
dot -V
which dot
https://brew.sh/2021/02/05/homebrew-3.0.0/
brew update
whereis dot
vi ~/.zshrc
whereis dot
conda install python-graphviz
pip install graphviz
where conda
pip3 install graphviz
vi /etc/paths
vi /etc/paths
sudo nano /etc/paths
whereis dot
sudo nano /etc/paths
echo $PATH
vi /etc/paths
sudo nano /etc/paths
which dot
sudo nano ~/.zshrc
source ~/.zshrc
which dot
sudo nano /etc/paths
sudo nano /etc/paths
which dot
sudo nano /etc/paths
echo $PATH
sudo nano $PATH
where dot
which dot
sudo nano $PATH
vi $PATH
$PATH
/etc/paths.d
sudo vi /etc/paths
ls
jupyer-lab
jupyter-lab
sude softwareupdate --install-rosetta --agree-to-license
sudo softwareupdate --install-rosetta --agree-to-license
cd ~/dev
ls
 unzip ~/Downloads/flutter_macos_arm64_3.7.3-stable.zip
 unzip ~/Downloads/flutter_macos_arm64_3.7.3-stable.zip
export PATH="$PATH:`pwd`/flutter/bin"\

flutter doctor
brew install androidstudio
brew install --cask android-studio
/Users/thomashu/Downloads/bw ; exit;
bw login
/Users/thomashu/Downloads/bw ; exit;
npm install -g @bitwarden/cli
brew install npm
bw login
ls
flutter create 
ls
flutter create
flutter create
brew install flutter
flutter create
flutter upgrade
npx create-next-app your-app-name\
cd your-app-name\

ls
cd
ls
cd your-app-name
npm install axios\

code
code -n
code
code -n
brew install git
yarn run dev
brew install yarn
yarn 
yarn install
yarn run
yarn run test
yarn run test
npm install
rm -rf node_modules
npm install
npm install web3-provider-engine
npm install web3-provider-engine
npm update @walletconnect/web3-subprovider
npm install web3-provider-engine
npm install
npm update --force
npm install
npm install
npm run dev\

npm install @mui/material @emotion/react @emotion/styled\

npm install @mui/icons-material\

npm install @mui/lab\

next run
npm run
npm run dev
xcode-select --install\

/Volumes/Adobe\ Photoshop\ 2023\ v24.2\ \[HCiSO\]/\[INSTALLER\]/Install.app/Contents/MacOS/Install ; exit;
/Volumes/Adobe\ Photoshop\ 2023\ v24.2\ \[HCiSO\]/\[INSTALLER\]/Install.app/Contents/MacOS/Install ; exit;
/Volumes/Adobe\ Photoshop\ 2023\ v24.2\ \[HCiSO\]/\[INSTALLER\]/Install.app/Contents/MacOS/Install ; exit;
npx create-next-app cyberpunk
 xattr -cr /Users/thomashu/Desktop/\[INSTALLER\]/Install.app 
cd /Users/thomashu/Documents/PnP/PR_Unity_Game-master 
code
..
ls
cd
..
ls
cd Documents
cd dev
ls
cd PnP
ls
mkdir test
cd test
code
code run
npm create-next-app
npm next
npm create next app
npm add next react react-dom ethers web3 styled-components
yarn create next-app
ls
cd bonding-curve
code open
cat << EOF >> ~/.bash_profile\
# Add Visual Studio Code (code)\
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"\
EOF
code
ls
code
$ code
yarn add next react react-dom ethers web3 styled-components
npm run dev
npm run dev
brew install python3
npm install ethers
npm uninstall ethers
npm i -S ethers@5.7.2
npm run dev
npm install
npm run dev
npm create react-app
create-react-app myapp
npm create-react-app myapp
npm create create-react-app myapp
npm react create
npm react
npx create-react-app my-app
npm install -D tailwindcss\
npx tailwindcss init
npm run start
npm install tailwindcss
npm run dev
npm start
npx tailwindcss init
npm start
npm install figma-js\
npm install @figma/plugin-typings\
npm install react react-dom\

npm run
npm starrt
npm start
npm start
npm run build
npm run dev
npm run
npm start
npm start
npm start
npm start
npm init -y
npm install react react-dom\
npm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react html-webpack-plugin\

npm start
ls
cd
ls
cd dev
ls
npm vite
npm create vite
npm install create-vite@4.2.0
npm create vite
cd unisocks
npm install
npm run dev
code .
npm install
npm install
npm run
npm start
npm run start
npm install -g npm-run-all
npm run start
npm run start
yarn remove react-scripts
yarn add react-scripts@4.0.3
npm run start
npm install
nvm
brew install nvm
nvm
npm install
git install
brew install git
npm install walletconnect/web3-provider-engine#3db8919ecd236e27af0577a00b4922b20da63bf9
npm install walletconnect/web3-provider-engine
;2Dnpm i @walletconnect/web3-provider
npm i @walletconnect/web3-provider
npm i @walletconnect/web3-subprovider
npm i @walletconnect/web3-subprovider@1.8.0
nvm install 14.18.3
brew install nvm
npm install nvm
nvm install 14.18.3
zsh-nvm install
zsh-nvm
install zsh-nvm
nvm install 14.18.3
export NVM_DIR="$HOME/.nvm"\
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm\

nvm install 14.18.3
nvm ls-remote
python
which python
export PATH="/path/to/python:$PATH"\

which python
which python3
export PATH="/opt/homebrew/bin/python3:$PATH"\

which python
nvm install 14.18.3
nvm list
nvm use v14.21.3
nvm use 14.21.3
nvm install 14.21.3
npm run
npm start
npm install
node upgrade
node update
node -v
nvm install node
nvm install node --reinstall-packages-from=node\
nvm install node --reinstall-packages-from=node
npm install
node -v
npm install nan@latest\

nvm install node
rm -rf node_modules\
npm cache clean\
npm install\

nvm install --lts
npm cache clean --force
node install
npm install
npm run
npm run dev
npm install react-router-dom localforage match-sorter sort-by
xcode-select --install
xcode-select --install
xcodebuild -license
sudo xcodebuild -license
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\

brew install nvm
export NVM_DIR="$HOME/.nvm"\
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm\

which python
which python3
const router = createBrowserRouter([\
  {\
    path: "/",\
    element: <div>Hello world  },\
]);
emsdk install mingw-4.6.2-32bit\
emsdk activate mingw-4.6.2-32bit
brew install emsdk
python --version
python3 --version
nodejs --version
node --v
node --version
gcc --version
git clone https://github.com/emscripten-core/emsdk.git
cd emsdk
git pull
./emsdk install latest
./emsdk active latest
source ./emsdk_env.sh
./ensdk install 1.38.45
./emsdk install 1.38.45
./emsdk update
./emsdk updatinstall latest
./emsdk install latest
   yes | ${sdk}/cmdline-tools/latest/bin/sdkmanager --licenses
   yes | ${sdk}/cmdline-tools/latest/bin/sdkmanager --licenses
brew install python3
brew reinstall python@11
brew reinstall python@3.11
ls
cd
yarn create vite
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/material @emotion/react @emotion/styled\

npm install @fontsource/roboto\

npm install @mui/icons-material\

npm install @web3-react/core @web3-react/injected-connector web3\

npm install @web3-react/core @web3-react/injected-connector web3\

npm install @ethersproject/providers\

npm uninstall @ethersproject/providers\

npm install web3\

npm install web3-react
npm install web3-react
npm install --save styled-components
npm install react-tilt
npm i react-tilt
ls
cd dev
yarn create-next-app
md unicocks
mkdir uniswap-clone
cd uniswap-clone
yarn create next-app -3 with-tailwindcss
ls
cd unicocks
ls
cd
ls
cd dev
ls
cd uniswap-clone
code .
export PATH=$PATH:~/.yarn/bin
yarn run dev
npm run dev
npm run
npm run dev
npm install
npm run dev
npm run dev
npm run dev
npm run dev
npm run
npm run start
npm run dev
npm run
npm run start
yarn dev
cd client
yarn dev
yarn start
yarn run
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
yarn run build
yarn run build
npm run dev
npm run dev
npm run dev
npm run dev
npm run dev
cd smart_contract
npm install --save-dev hardhat
npx hardhat
npm hardhat run
npx hardhat run
node --version
n use 18x
nvm
brew install n
nvm install --lts
bash install_nvm.sh
n lts
sudo n lts
npm hardhat run
npx hardhat run
npx hardhat run scripts/deploy.js
npx hardhat compile
npx hardhat compile
npx hardhat run scripts/deploy.js --network mumbai
npx hardhat compile
npm install alchemy-sdk
npx hardhat run scripts/deploy.js --network polygon_mumbai
npx hardhat test
npx hardhat test scripts/deploy.js
npx hardhat run scripts/deploy.js --network polygon_mumbai
npx hardhat run --network polygon_mumbai
npx hardhat run --network polygon_mumbai --show-stack-traces
npx hardhat run script scripts/deploy.js --network polygon_mumbai --show-stack-traces
npx hardhat run scripts/deploy.js --network polygon_mumbai --show-stack-traces
npx hardhat run scripts/deploy.js --network polygon_mumbai --show-stack-traces
npx hardhat run scripts/deploy.js --network polygon_mumbai --show-stack-traces
npm install -D tailwindcss\
npx tailwindcss init
npm install
npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch
npm install -D tailwindcss\
npx tailwindcss init
npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch
npx tailwindcss -i ./styles/globals.css -o ./dist/output.css --watch
npm install -D tailwindcss postcss autoprefixer\
npx tailwindcss init -p
yarn add react-icons
yarn @ethers
add ethers
yarn add ethers
npm uninstall ethers
npm install ethers
npm install web3.js
npm install web3
npm uninstall ethers
npm install ethers@5.5.4
yarn add @sanity/client
yarn add react-modal
npm i --save-dev @types/react-modal
yarn add @emotion/react
yarn add react-spinners
vercel
yarn add vercel
vercel
vercel
npm install vercel
vercel
npm install -g vercel
export PATH=$PATH:~/.yarn/bin
vercel
vercel
vercel
git push
yarn add react-tilt
yarn run dev
npm create sanity@latest -- --template get-started --project hmqytu8h --dataset production --provider google
cd studio
sanity init --coupon cleverprogrammer
npm install -g @sanity/cli
sanity init --coupon cleverprogrammer
sanity start
sanity start
npx sanity dev
npx thirdweb deploy 
npx hardhat compile
npm install @openzepplin/contracts
npm install openzepplin
npm install openzeppelin
npm install @openzeppelin/contracts
npx thirdweb deploy 
npm install @thirdweb-dev/sdk ethers@5
ls
cd smart_contracts
npm install @openzeppelin/contracts
npx thirdweb deploy 
pip install matplotlib
cd ..
ls
python3 run plot
python3 run plot.py
ls
python3 plot.py
pip install matplotlib
python3 plot.py
pip3 install matplotlib
python3 plot.py
npx thirdweb deploy 
ls
cd smart_contracts
npx thirdweb deploy
npx thirdweb deploy
clear
..
cd ..
ls
cd client
cd ..
npx thirdweb 
npx thirdweb create 
npm vercel
npx vercel
ls
cd client
yarn run
cd client
yarn deploy
yarn dev run
next dev run
yarn dev
git checkout -b frontend
git .
git status
npm install @thirdweb-dev/sdk ethers@5
yarn run
npm run dev
npm install -D prettier prettier-plugin-tailwindcss
npm run dev
 npm install -D prettier prettier-plugin-tailwindcss
prettier --check "./**/*.js\
"
npm install prettier
prettier --check "./**/*.js"
npm install -D tailwindcss\
npx tailwindcss init
npm install -D tailwindcss\
npx tailwindcss init
npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch
npx tailwindcss -i ./styles/globals.css -o ./dist/output.css --watch
npm install -D tailwindcss postcss autoprefixer\
npx tailwindcss init -p
npx tailwind init
npm run dev
git merge .
git merge
git commit -m 'merge'
git help
git merge frontend main
git merge help
git merge --help
git merge main
git merge frontend
git checkout main
git merge frontend
git push
vercel deploy
yarn clean cache
-rm yarn.lock
rm -rf node_modules
rm -rf node_modules/
yarn
vercel deploy
npm i vercel@latest
yarn install
yarn run 
yarn run dev
vercel deploy
npm upgrade
npm run dev
npm run dev
npm install thirdweb
ls
cd dev
ls
npx thirdweb create contract
npx thirdweb create contract
cd pnp-contracts
code .
lsof -i :3000-3004\

kill -9 4563
kill -9 1153lsof -i :3000\

lsof -i :3000\

kill -9 46975
lsof -i 127.0.0.1:8545
lsof -i 8545
lsof -i :8545
kill -9 47477
Access denied\
You do not have access to chat.openai.com.\
\
The site owner may have set restrictions that prevent you from accessing the site.
open /System/Library/Image\ Capture/Devices/VirtualScanner.app/Contents/Resources/simpledoc.pdf
curl -X 'GET' \\
  'https://api.elevenlabs.io/v1/voices/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L/audio' \\
  -H 'accept: audio/*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23'
curl -X 
curl -X 'GET' \\
'https://api.elevenlabs.io/v1/voices/https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream\
'
curl -X 'POST' \\
  'https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream' \\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \\
  -d '{\
  "text": "string",\
  "voice_settings": {\
    "stability": 0,\
    "similarity_boost": 0\
  }\
}'
curl -X --output t2s  'POST' \\
  'https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream' \\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \\
  -d '{\
  "text": "string",\
  "voice_settings": {\
    "stability": 0,\
    "similarity_boost": 0\
  }\
}'
curl -X -o output.txt 'POST' \\
  'https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream' \\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \\
  -d '{\
  "text": "string",\
  "voice_settings": {\
    "stability": 0,\
    "similarity_boost": 0\
  }\
}'
curl -X -o output.txt 'POST' \\
  'https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream' \\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \\
  -d '{\
  "text": "string",\
  "voice_settings": {\
    "stability": 0,\
    "similarity_boost": 0\
  }\
}'
curl -X 'POST' \\
  'https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM/stream' \\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \\
  -d '{\
  "text": "string",\
  "voice_settings": {\
    "stability": 0,\
    "similarity_boost": 0\
  }\
}' -O
ls
touch 
curl -X 'POST' \\
  'https://api.elevenlabs.io/v1/history/d339VHpZX9qfpzdTaoxb/audio'\\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \
}'\

curl -X 'POST' \\
  'https://api.elevenlabs.io/v1/history/d339VHpZX9qfpzdTaoxb/audio'\\
  -H 'accept: */*' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23' \\
  -H 'Content-Type: application/json' \
\

curl -X 'GET' \\
  'https://api.elevenlabs.io/v1/history/pwv5M0Kpt5PjBbNKE8XZ/audio' \\
  -H 'accept: audio/mpeg' \\
  -H 'xi-api-key: 440192f914b43f96c0fc77f3d893de23'
say -v 'Zoe (Premium)' "This is an example of the Zoe voice for my comment on Hacker News."
say -v 'Zoe (Premium)' "This is an example of the Zoe voice for my comment on Hacker News."
= cd Documents/Github/Auto-GPT  
 cd Documents/Github/Auto-GPT  
python3 -m autogpt
ls
cd Documents/Github/Auto-GPT python3 -m autogpt
cd Documents/Github/Auto-GPT
python3 -m autogpt
cd Documents/Github/Auto-GPT
python3 -m autogpt
cd
ls
cd Documents/GitHub
ls
cd
cd Auto-GPT
ls
cd DOcuments/GitHub
cd Auto-GPT
ls
pip3 install -r requirements.txt
ls
python3 -m autogpt --speak
python3 -m autogpt
python3 -m autogpt
brew tap heroku/brew && brew install heroku
if type brew &>/dev/null\
then\
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"\
\
  autoload -Uz compinit\
  compinit\
fi
~/.zshrc 
nano ~/.zshrc
rm -f ~/.zcompdump; compinit\

--refres-cache
--refresh-cache
heroku autocomplete --refresh-cache
curl -X POST \\
> -F "audio=@/Users/thomashu/Documents/GitHub/speech-rest-api/output.wav" \\
> http://localhost:80/transcribe\
{"language":"en","text":"Hello, how are you? My name is Shup. It is a pleasure to meet you."}
 curl -X POST \\
> -F "audio=@/Users/thomashu/Documents/GitHub/speech-rest-api/output.wav" \\
> http://localhost:80/transcribe
curl -X POST
curl -X POST \\
-F "audio=@/Users/thomashu/Documents/GitHub/speech-rest-api/output.wav" \\
htt[://localhost:80/transcribe
curl -X POST \\
-F "audio=@/Users/thomashu/Documents/GitHub/speech-rest-api/output.wav" \\
http://localhost:80/transcribe
ls
cd ..
ls
cd speech-rest-api
ps aux | grep node
clear
clear
ps aux | grep node
nano /Users/thomashu/Desktop/db.json 
python3 -m autogpt
ls
cd Documents/Github/Auto-GPT
cd Documents/Github/Auto-GPT
python3 -m autogpt
